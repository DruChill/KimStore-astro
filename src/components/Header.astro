---
interface Props {
  currentPath?: string;
}

const { currentPath = "/" } = Astro.props;

const navItems = [
  { name: "Inicio", href: "/" },
  { name: "Clientes", href: "/clientes" },
  { name: "Contacto", href: "/contacto" },
  { name: "Acerca de", href: "/acerca-de" }
];
---

<header class="bg-neutral-900 text-white border-b border-neutral-800">
  <nav class="max-w-7xl mx-auto">
    <div class="flex justify-between items-center h-16">
      <!-- Brand Logo/Text -->
      <div class="shrink-0">
        <a 
          href="/" 
          class="text-xl font-semibold text-white hover:text-neutral-200 transition-colors duration-200"
        >
          KimYuna
        </a>
      </div>

      <!-- Navigation Menu -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-8">
          {navItems.map((item) => (
            <a
              href={item.href}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                currentPath === item.href
                  ? "bg-neutral-800 text-white"
                  : "text-neutral-300 hover:text-white hover:bg-neutral-800"
              }`}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button
          type="button"
          class="bg-neutral-800 inline-flex items-center justify-center p-2 rounded-md text-neutral-400 hover:text-white hover:bg-neutral-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
          aria-controls="mobile-menu"
          aria-expanded="false"
          id="mobile-menu-button"
        >
          <span class="sr-only">Abrir men√∫ principal</span>
          <!-- Hamburger icon -->
          <svg 
            class="block h-6 w-6" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor" 
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <!-- Close icon (hidden by default) -->
          <svg 
            class="hidden h-6 w-6" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor" 
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div class="md:hidden hidden" id="mobile-menu">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-neutral-800">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
              currentPath === item.href
                ? "bg-neutral-800 text-white"
                : "text-neutral-300 hover:text-white hover:bg-neutral-800"
            }`}
          >
            {item.name}
          </a>
        ))}
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const hamburgerIcon = mobileMenuButton?.querySelector('svg:first-of-type');
  const closeIcon = mobileMenuButton?.querySelector('svg:last-of-type');

  mobileMenuButton?.addEventListener('click', () => {
    const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
    
    mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
    mobileMenu?.classList.toggle('hidden');
    hamburgerIcon?.classList.toggle('hidden');
    closeIcon?.classList.toggle('hidden');
  });

  // Close mobile menu when clicking on a link
  const mobileMenuLinks = mobileMenu?.querySelectorAll('a');
  mobileMenuLinks?.forEach(link => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
      hamburgerIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
    });
  });
</script>